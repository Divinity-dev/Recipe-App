#!/usr/bin/env ruby
#
# This file was generated by Bundler.
#
# The application 'bundle' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

module BundleRunner
  module_function

  def invoked_as_script?
    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
  end

  def env_var_version
    ENV.fetch('BUNDLER_VERSION', nil)
  end

  def cli_arg_version
    return unless invoked_as_script?
    return unless ARGV.first == 'update'

    bundler_version = nil
    ARGV.each_with_index do |arg, i|
      if i.succ == update_index && arg =~ Gem::Version::ANCHORED_VERSION_PATTERN
        bundler_version = arg
      elsif arg =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
        bundler_version = Regexp.last_match(1)
        i
      end
    end
    bundler_version
  end

  def gemfile
    ENV['BUNDLE_GEMFILE']&.then { |file| file.empty? ? nil : file } || File.expand_path('../Gemfile', __dir__)
  end

  def lockfile
    case File.basename(gemfile)
    when 'gems.rb'
      gemfile.sub(/\.rb$/, '.locked')
    else
      "#{gemfile}.lock"
    end
  end

  def lockfile_version
    return unless File.file?(lockfile)

    lockfile_contents = File.read(lockfile)
    Regexp.last_match(1) if lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/
  end

  def bundler_requirement
    @bundler_requirement ||= env_var_version || cli_arg_version || bundler_requirement_for(lockfile_version)
  end

  def bundler_requirement_for(version)
    version ? Gem::Version.new(version).approximate_recommendation : "#{Gem::Requirement.default}.a"
  end

  def load_bundler!
    ENV['BUNDLE_GEMFILE'] ||= gemfile
    activate_bundler
  end

  def activate_bundler
    gem_error = activation_error_handling { gem 'bundler', bundler_requirement }
    return if gem_error.nil?

    require_error = activation_error_handling { require 'bundler/version' }
    return if require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))

    warn "Activating bundler (#{bundler_requirement}) failed:\n#{gem_error.message}\n\nTo install the version of bundler this project requires, run `gem install bundler -v '#{bundler_requirement}'`"
    exit 42
  end

  def activation_error_handling
    yield
    nil
  rescue StandardError, LoadError => e
    e
  end
end

BundleRunner.load_bundler!

load Gem.bin_path('bundler', 'bundle') if BundleRunner.invoked_as_script?
